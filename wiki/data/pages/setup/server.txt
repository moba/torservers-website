====== Tor Exit Full Setup ======

=====  Basic Setup  =====

  * Debian 64bit
  * VMs are not used because it turned out that it is not feasible (to high overhead for high bandwidth nodes)
      * ESX is reported to work; we tried KVM, OpenVZ and XEN

====  SSH key authentication only  ====

<code>
adduser youruser
su youruser
mkdir ~/.ssh
chmod 700 ~/.ssh 
vi authorized_keys2
</code>
  * paste in your public key; i use 2048 RSA keys
  * save and try logging in with key

  * ssh config with password auth and PAM disabled, no root login, x11forwarding disabled
<code>
cd /etc/ssh
mv sshd_config sshd_config.dist
wget http://www.torservers.net/misc/config/sshd_config
vi sshd_config
</code>
  * change port to some port of your chosing above 1024 (when using multiple IPs: bind to one IP only)
<code>
/etc/init.d/ssh reload
</code>
  * login on new port in parallel shell and check if okay
  * close old shell


====  iptables firewall  ====
<code>
cd /etc
wget http://www.torservers.net/misc/config/iptables.test.rules
chmod 600 iptables.test.rules
vi iptables.test.rules # update at least SSH port
iptables-restore < iptables.test.rules
</code>
  * test if you can still connect in another session :)
<code>
iptables-save > iptables.rules
chmod 600 iptables.rules
cd /etc/network/if-pre-up.d/
wget http://www.torservers.net/misc/config/iptables
chmod +x iptables
</code>

This config by defaults allows world access to the SSH port and Tor ports 80,443. Think about limiting that to an IP (range) you can connect from, or [[http://www.debian-administration.org/articles/268|portknocking]].

====  a few defaults  ====
<code>
# configure hostname
hostname brizzle.torservers.net
vi /etc/hostname # also use brizzle.torservers.net
vi /etc/hosts # update to brizzle.torservers.net brizzle
/etc/init.d/sysklogd reload

# disable debian default that pulls in recommended packages:
cd /etc/apt/apt.conf.d
wget http://www.torservers.net/misc/config/06norecommends

aptitude update && aptitude full-upgrade
aptitude install sudo less jed htop nload mercurial screen denyhosts \
ntp apticron vnstat logcheck logcheck-database
aptitude remove --purge portmap

vnstat -u -i eth0 # setup vnstat for correct interface
sudoedit /etc/resolv.conf # remove search line
cd /etc
mv aliases aliases.dist
wget http://www.torservers.net/misc/config/aliases
vi aliases # edit last lime and change to your email address
newaliases
dpkg-reconfigure exim4-config
# "internet site; mail is sent and received directly using SMTP"
# all default 
</code>

=====  Tor  =====

  * https://blog.torproject.org/blog/tips-running-exit-node-minimal-harassment
  * currently testing [[setup:zabbix]] for monitoring
  * anonymizing relay monitor (arm) [[http://www.atagar.com/arm/]] for direct Tor node observation
  * [[http://humdi.net/vnstat/|vnstat]] for bandwidth stats


====  preparation  ====


<code>
# add tor sources
echo 'deb     http://deb.torproject.org/torproject.org squeeze main' >> /etc/apt/sources.list
echo 'deb     http://deb.torproject.org/torproject.org experimental-squeeze main' >> /etc/apt/sources.list
vi /etc/apt/sources.list # remove the cdrom line(s)
apt-key adv --recv-keys --keyserver keys.gnupg.net 886DDD89
# if down use eg. keyserver.ubuntu.com
aptitude update
</code>

====  setup  ====
<code>
aptitude install tor tor-geoipdb
/etc/init.d/tor stop
cd /etc/tor
hg init
rm *
wget http://www.torservers.net/misc/config/torrc
vi torrc
# change nickname, address/outboundbindaddress/orlistenaddress
# for multiple installs, change datadirectory and pidfile
hg add .
hg ci -m"Initial config."
</code>

Register at [[https://weather.torproject.org/|Tor Weather]] for basic monitoring.

====  manual compilation  ====

On high bandwidth nodes, or nodes with restricted resources, you should compile Tor manually. See [[http://moblog.wiredwings.com/archives/20100427/Tor-on-Debian,-self-compiled-for-better-Performance.html|this blog post]] for details.

  *  TODO: Compile on one machine and distribute .deb to others/set up a repository

====  What Ports Should I Use?  ====

 -> [[:faq|FAQ]]
=====  Webserver  =====

<code>
apt-get install lighttpd php5-cgi
cd /etc/lighttpd
mv lighttpd.conf lighttpd.conf.dist
wget http://www.torservers.net/misc/config/lighttpd.conf
mkdir conf.d
# this config disables public version number display and IP logging
# and allows for extra configs in conf.d
cd /var/www
wget http://www.torservers.net/misc/config/web-index.txt
touch -d 20010101 cache
chown www-data:www-data cache
mv web-index.txt index.php
rm index.lighttpd.html
rm index.html
lighty-enable-mod fastcgi
lighty-enable-mod fastcgi-php
/etc/init.d/lighttpd force-reload
</code>

To run Lighttpd and Tor's DirPort on the same port use mod_proxy:

<code>
lighttpd-enable-mod proxy
cd /etc/lighttpd/conf-enabled
mv 10-proxy.conf 10-proxy.conf.dist
wget http://www.torservers.net/misc/config/10-proxy.conf
/etc/init.d/lighttpd reload
</code>

By default this will redirect requests for /tor/ to 127.0.0.1 port 9030; edit torrc and set DirPort to 80 and DirListenAddress to 127.0.0.1:9030.

===== Generate Bandwidth Stats =====

We want to have better stats (feel free to help on this). For now, we use vnstat and vnstati to generate public bandwidth stats on each node individually.

<code>
apt-get install vnstati
# create empty images in root-owned /var/www and change owner to www-data
cd /var/www
touch vnstat.png vnstat_d.png vnstat_m.png
chown www-data:www-data vnstat*.png
# set up cron job
crontab -u www-data -e
</code>

<code>*/10 * * * * /usr/bin/vnstati -vs -o /var/www/vnstat.png -i eth0 >/dev/null 2>&1 ;fi
*/10 * * * * /usr/bin/vnstati -d -o /var/www/vnstat_d.png -i eth0 >/dev/null 2>&1 ;fi
1 3 * * * /usr/bin/vnstati -m -o /var/www/vnstat_m.png -i eth0 >/dev/null 2>&1 ;fi
</code>

If you still run Debian Lenny, vnstati is not in the default repository. You can find it here: http://debian.uvena.de/stable/packages.php

=====  Local DNS server  =====

  * we use unbound, a local caching DNS server
  * for optimizations, see [[http://www.unbound.net/documentation/howto_optimise.html]]; we don't use any of them at the moment, it just works fine out of the box
  * many people use Google DNS, and it is indeed among the best choices of free DNS. do not use openDNS or other DNS providers that filter DNS requests

<code>
apt-get install unbound
vi /etc/resolv.conf # insert top: nameserver 127.0.0.1
</code>

===== Apparmor profile (unconfirmed!) =====

  * This profile has been tested to work with multiple Tor processes as described here: http://archives.seul.org/or/relays/Sep-2010/msg00004.html
  * The profile should be disabled while Tor is installed for the first time, since different permissions are required for setup and normal operation.
  * We are not using this for Torservers.net. This does not work on our Debian.

<code># Last Modified: Sat Mar 19 00:38:15 2011
# Apparmor profile for Tor with multiple processes on:
# Ubuntu 10.04

#include <tunables/global>

/usr/sbin/tor {
  #include <abstractions/base>
  #include <abstractions/nameservice>

  capability setgid,
  capability setuid,

  /etc/passwd mr,
  /etc/tor/* r,
  /usr/share/tor/* r,
  owner /var/lib/tor*/cached* rw,
  owner /var/lib/tor*/cached-descriptors mrw,
  /var/lib/tor*/cached-status/ r,
  owner /var/lib/tor*/cached-status/* rw,
  owner /var/lib/tor*/fingerprint r,
  owner /var/lib/tor*/keys/secret_id_key r,
  owner /var/lib/tor*/keys/secret_onion_key* rw,
  owner /var/lib/tor*/lock rwk,
  owner /var/lib/tor*/state* rw,
  owner /var/log/tor*/* rw,
  /var/run/tor*/tor*.pid rw,
}
</code>
======  High Bandwidth Tweaks (>100 mbps?)  ======

You might also be interested in this or-relay thread regarding high speed relay tweaks:
[[http://thread.gmane.org/gmane.network.onion-routing.general/2841|How to Run High Capacity Tor Relays]]

If you're hitting CPU or memory limits, you should look into [[http://moblog.wiredwings.com/archives/20100427/Tor-on-Debian,-self-compiled-for-better-Performance.html|compiling your own Tor]]. 

In general, as with all optimizations: you should only apply those that are necessary for you.

===== Multiple Tor Processes =====

Currently, Tor does not scale on multicore CPUs. One Tor process is able to handle around 100mbps of throughput. If your line supports more, you will need to run multiple Tor processes. There is a modified initscript that makes it easy to manage multiple Tor configurations on one machine: (thanks Teun! source: http://archives.seul.org/or/relays/Sep-2010/msg00004.html)

<code>cd /etc/init.d
wget -O tor https://www.torservers.net/misc/config/initd-tor
chmod +x tor

## example usage:
# ls /etc/tor
tor0.cfg tor1.cfg tor2.cfg tor3.cfg
# /etc/init.d/tor start    # starts tor 0-3
# /etc/init.d/tor stop     # stops tor 0-3
# /etc/init.d tor reload tor2 tor3
# /etc/init.d/tor stop tor1</code>

===== sysctl.conf =====

<code>cd /etc
mv sysctl.conf sysctl.conf.dist
wget http://www.torservers.net/misc/config/sysctl.conf
# go through the settings once again! some only useful with large memory and CPU
# better tweaking probably possible; magic involved
sysctl -p
</code>

===== vnstat MaxBandwidth =====

Set MaxBandwidth to line maximum, eg. for GBit:

<code>sed "s/MaxBandwidth 100/MaxBandwidth 1000/g" -i /etc/vnstat.conf
/etc/init.d/vnstat restart # don't reload; will stop vnstat from updating its db...</code>

===== TXQueueLen, MTU "Jumbo Frames" =====

Might be useful in some cases. Only optimize when you need to!

<code>
# remove "exit" from rc.local, then
echo 'ifconfig eth0 txqueuelen 20000' >> /etc/rc.local
ifconfig eth0 mtu 9000
# to make permanent, add "mtu 9000" to /etc/network/interfaces
</code>

===== Receive Packet Steering (RPS) =====
  * enable [[http://moblog.wiredwings.com/archives/20100827/Howto-Enable-Receive-Packet-Steering-RPS-on-Linux-2.6.35.html|RPS]] on kernels >= 2.6.35
  * edit /etc/network/interfaces:

<code>

auto eth1
iface eth1 inet static
address 123.456.789.01
netmask 255.255.255.255
gateway 012.345.678.90
up echo f > /sys/class/net/eth1/queues/rx-0/rps_cpus
</code>

===== Receive Flow Steering (RFS) =====

Receive Flow Steering (RFS), also introduced with kernel 2.6.35, might help if you run multiple Tor processes, but test first and monitor CPU usage across the CPU cores.

<code>
echo 16384 > /sys/class/net/eth0/queues/rx-0/rps_flow_cnt
echo 16384 > /proc/sys/net/core/rps_sock_flow_entries
</code>

To make it permanent put it some place useful (can it be put into sysctl.conf?)

======  TODO/Extras/Open Discussions  ======

  * VPN - openVPN?
  * Freenet?
  * TODO: pull MyFamily setting from a central place, signed - or push it to all machines from local machine?
  * TODO: public traffic/other stats. i didn't like cacti very much...
  * Julian is working on monitoring using SNMP and OpenNHS
  * disable webserver referer and user-agent logging, too?
  * selinux/appamor/chroot?
  * firewall: is [[http://moblog.wiredwings.com/archives/20110203/Howto-Install-TARPIT-on-Debian-Stable-Lenny.html|tarpitting]] really useful for us?